<?php
/**
* This module contains custom functionality for sites that I run.
* 
* @todo List specific features here. :-)
*
* @author Douglas Muth <http://www.claws-and-paws.com/>
*/


require_once("comment.inc.php");
require_once("cron.inc.php");
require_once("flag.inc.php");
require_once("menu.inc.php");
require_once("nodeapi.inc.php");
require_once("settings.inc.php");
require_once("user.inc.php");
require_once("vars.inc.php");


/**
* Our init hook.
*/
function ddt_init() {

	//
	// Various debugging statements for testing.
	//
	//print "In ddt_init()"; // Debugging
	//ddt_log("test: !time", array("!time" =>  time()));
	//ddt_log("test: !time", array("!time" =>  time()), WATCHDOG_WARNING);
	//ddt_log("test: !time", array("!time" =>  time()), WATCHDOG_ERROR, l("test link", "http://test"));

	//ddt_uninstall(); // Debugging
	//ddt_install(); // Debugging
	//ddt_cron(); // Debugging

} // End of ddt_init()


/**
* Log when this module is enabled.
*/
function ddt_enable() {
	ddt_log("DDT Module enabled");
}


/**
* Log when this module is disabled.
*/
function ddt_disable() {
	ddt_log("DDT Module disabled");
}




/**
* Hook for inserting a new private message.
*
* @param array $message An associative array of message information.
*/
function ddt_privatemsg_message_insert($message) {
	$log_message = t("New private message created. MID: %mid");
	$var = array();
	$var["%mid"] = $message["mid"];
	ddt_log($log_message, $var);
}


/**
* Hook for viewing a private message.
*
* @param array $message An associative array of message information.
*/
function ddt_privatemsg_message_load($message) {

	$mid = $message["mid"];

	if (empty($GLOBALS["ddt"]["mid"])) {
		$GLOBALS["ddt"]["mid"] = array();
		$GLOBALS["ddt"]["mid"]["high"] = "";
		$GLOBALS["ddt"]["mid"]["low"] = "";
	}

	$mids = &$GLOBALS["ddt"]["mid"];

	//
	// Determine our low and high MIDs.  These will later be logged
	// in the exit hook.
	//
	if (!$mids["high"]
		|| $mid > $mids["high"]) {
		$mids["high"] = $mid;
	}
	
	if (!$mids["low"]
		|| $mid < $mids["low"]) {
		$mids["low"] = $mid;
	}
	
} // End of ddt_privatemsg_message_load()


/**
* Our exit hook.  It is called at the end of the page load.
*/
function ddt_exit() {

	//
	// No Message IDs?  Stop here.
	//
	if (empty($GLOBALS["ddt"]["mid"])) {
		return(null);
	}

	$mids = &$GLOBALS["ddt"]["mid"];
	$var = array();

	//
	// At this point, log evidence of reading private messages.
	// We do this here, since we'll have "read" all of the messages
	// any given thread, and can log just the low and high MIDs,
	// instead of writing a separate log entry for each MID.
	//
	if ($mids["high"] == $mids["low"]) {
		//
		// There was only a single message in the thread.
		//
		$message = t("Read private message. MID: %mid");
		$var["%mid"] = $mids["low"];

	} else {
		//
		// There were multiple messages in the thread.
		//
		$message = t("Read private messages. MIDS: %low-%high");
		$var["%low"] = $mids["low"];
		$var["%high"] = $mids["high"];

	}

	ddt_log($message, $var);

} // End of ddt_exit()


/**
* Our wrapper for watchdog()
*
* @param string $message The message, which will be passed to t().
*	For substitution, using !string is probably the way to go.
*
* @param array $variables Array of variable substituions for t().
*
* @param string $severity Valid values are WATCHDOG_NOTICE, 
*	WATCHDOG_WARNING, and WATCHDOG_ERROR.
*
* @return void
*
*/
function ddt_log($message, $variables = array(), 
	$severity = WATCHDOG_NOTICE, $url = "") {

	if ($severity == "") {
		$severity = WATCHDOG_NOTICE;
	}

	watchdog("ddt", $message, $variables, $severity, $url);

} // End of ddt_log()

